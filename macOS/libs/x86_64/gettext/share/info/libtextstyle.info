This is libtextstyle.info, produced by makeinfo version 7.1 from
libtextstyle.texi.

   Copyright (C) 2018-2024 Free Software Foundation, Inc.

   This manual is free documentation.  It is dually licensed under the
GNU FDL and the GNU GPL. This means that you can redistribute this
manual under either of these two licenses, at your choice.

   This manual is covered by the GNU FDL. Permission is granted to copy,
distribute and/or modify this document under the terms of the GNU Free
Documentation License (FDL), either version 1.2 of the License, or (at
your option) any later version published by the Free Software Foundation
(FSF); with no Invariant Sections, with no Front-Cover Text, and with no
Back-Cover Texts.  A copy of the license is at
<https://www.gnu.org/licenses/fdl.html>.

   This manual is covered by the GNU GPL. You can redistribute it and/or
modify it under the terms of the GNU General Public License (GPL),
either version 2 of the License, or (at your option) any later version
published by the Free Software Foundation (FSF). A copy of the license
is at <https://www.gnu.org/licenses/gpl.html>.
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* GNU libtextstyle: (libtextstyle).     Output of styled text.
END-INFO-DIR-ENTRY

   This manual provides documentation for the GNU ‘libtextstyle’
library.


File: libtextstyle.info,  Node: Top,  Next: Introduction,  Up: (dir)

GNU libtextstyle
****************

   This manual documents the GNU libtextstyle library, version 0.24.

* Menu:

* Introduction::                Introduction
* The user's view::             The user's perspective
* The programmer's view::       The programmer's perspective
* Licenses::
* Function Index::
* Variable Index::
* Index::


File: libtextstyle.info,  Node: Introduction,  Next: The user's view,  Prev: Top,  Up: Top

1 Introduction
**************

   Text is easier to read when it is accompanied with styling
information, such as color, font attributes (weight, posture), or
underlining, and this styling is customized appropriately for the output
device.

   GNU libtextstyle provides an easy way to add styling to programs that
produce output to a console or terminal emulator window.  It does this
in a way that allows the end user to customize the styling using the
industry standard, namely Cascading Style Sheets (CSS).

* Menu:

* Style definitions::
* Built-in versus separate styling::


File: libtextstyle.info,  Node: Style definitions,  Next: Built-in versus separate styling,  Up: Introduction

1.1 Style definitions
=====================

   Let's look at the traditional way styling is done for specific
programs.

   Browsers, when they render HTML, use CSS styling.

   The older approach to user-customizable text styling is that the user
associates patterns with escape sequences in an environment variable or
a command-line argument.  This is the approach used, for example, by the
GNU ‘ls’ program in combination with the ‘dircolors’ program.  The
processing is distributed across several steps:
  1. There is default style definition that is hard-coded in the
     ‘dircolors’ program.  The user can also define their own
     definitions in a file such as ‘~/.dir_colors’.  This style
     definition contains explicit terminal escape sequences; thus, it
     can only be used with consoles and terminal emulators, and each
     style definition applies only to a certain class of
     mostly-compatible terminal emulators.
  2. The ‘dircolors’ program, when invoked, translates such a style
     definition to a sequence of shell statements that sets an
     environment variable ‘LS_COLORS’.
  3. The shell executes these statements, and thus sets the environment
     variable ‘LS_COLORS’.
  4. The program looks at the environment variable and emits the listed
     escape sequences.

   In contrast, this library implements styling as follows:
  1. There is a default style definition in a CSS file that is part of
     the same package as the stylable program.  The user can also define
     their own definitions in a CSS file, and set an environment
     environment variable to point to it.
  2. The program looks at the environment variable, parses the CSS file,
     translates the styling specifications to the form that is
     appropriate for the output device (escape sequences for terminal
     emulators, inline CSS and ‘<span>’ elements for HTML output), and
     emits it.

   Thus, with GNU libtextstyle, the styling has the following
properties:
   • It is easier for the user to define their own styling, because the
     file format is standardized and supported by numerous syntax aware
     editors.
   • A styling file does not depend on the particular output device.  An
     HTML output and a black-on-white terminal emulator can use the same
     styling file.  A white-on-black (or even green-on-black) terminal
     emulator will need different styling, though.
   • It is simpler: There is no need for a program that converts the
     style specification from one format to another.


File: libtextstyle.info,  Node: Built-in versus separate styling,  Prev: Style definitions,  Up: Introduction

1.2 Built-in versus separate styling
====================================

   There are generally two approaches for adding styling to text:
   • The program that generates the text adds the styling.  It does so
     through interleaved statements that turn on or off specific
     attributes.
   • The styling gets added by a separate program, that postprocesses
     the output.  This separate program usually uses regular expressions
     to determine which text regions to style with a certain set of text
     attributes.

   The first approach produces a styling that is 100% correct,
regardless of the complexity of the text that is being output.  This is
the preferred approach for example for JSON, XML, or programming
language text.

   The second approach works well if the output has a simple,
easy-to-parse format.  It may produce wrong styling in some cases when
the text format is more complex.  This approach is often used for
viewing log files.

   GNU libtextstyle supports both approaches; it includes an example
program for each of the two approaches.


File: libtextstyle.info,  Node: The user's view,  Next: The programmer's view,  Prev: Introduction,  Up: Top

2 The end user's perspective
****************************

   Styled output can viewed fine in a console or terminal emulator
window.

   The stylable program will typically have the following options:
‘--color’
     Use colors and other text attributes always.
‘--color=WHEN’
     Use colors and other text attributes if WHEN.  WHEN may be
     ‘always’, ‘never’, ‘auto’, or ‘html’.
‘--style=STYLE-FILE’
     Specify the CSS style rule file for ‘--color’.

   For more details, see the sections *note The --color option:: and
*note The --style option:: below.

   If the output does not fit on a screen, you can use ‘less -R’ to
scroll around in the styled output.  For example:
     PROGRAM --color ARGUMENTS | less -R

* Menu:

* The TERM variable::
* The NO_COLOR variable::
* The NO_TERM_HYPERLINKS variable::
* Emacs::
* The --color option::
* The --style option::


File: libtextstyle.info,  Node: The TERM variable,  Next: The NO_COLOR variable,  Up: The user's view

2.1 The environment variable ‘TERM’
===================================

   The environment variable ‘TERM’ contains a identifier for the text
window's capabilities.  You can get a detailed list of these
cababilities by using the ‘infocmp’ command (for example: ‘infocmp -L1
xterm’), using ‘man 5 terminfo’ as a reference.

   When producing text with embedded color directives, a
‘libtextstyle’-enabled program looks at the ‘TERM’ variable.  Text
windows today typically support at least 8 colors.  Often, however, the
text window supports 16 or more colors, even though the ‘TERM’ variable
is set to a identifier denoting only 8 supported colors.  It can be
worth setting the ‘TERM’ variable to a different value in these cases.

   After setting ‘TERM’, you can verify how well it works by invoking
‘PROGRAM --color=test’, where ‘PROGRAM’ is any ‘libtextstyle’-enabled
program, and seeing whether the output looks like a reasonable color
map.

* Menu:

* Terminal emulators::
* Consoles::


File: libtextstyle.info,  Node: Terminal emulators,  Next: Consoles,  Up: The TERM variable

2.1.1 Terminal emulator programs
--------------------------------

   The following terminal emulator programs support 256 colors and set
‘TERM=xterm-256color’ accordingly:

   • In GNOME: ‘gnome-terminal’, ‘tilda’.
   • ‘rxvt-unicode’ (sets ‘TERM=rxvt-unicode-256color’).
   • ‘st’ (sets ‘TERM=st-256color’).
   • ‘QTerminal’.
   • On macOS: ‘Terminal’, ‘iTerm2’.

   The following terminal emulator programs support 256 colors.  You
only need to set ‘TERM=xterm-256color’ or similar; the programs by
default set ‘TERM’ to a value that supports only 8 colors.

   • ‘xterm’ is in many cases built with support for 256 colors.  But it
     sets ‘TERM=xterm’.  You need to set ‘TERM=xterm-256color’.
   • In GNOME: ‘guake’ (sets ‘TERM=xterm’).  You need to set
     ‘TERM=xterm-256color’.
   • In KDE: ‘konsole’ (sets ‘TERM=xterm’).  You need to set
     ‘TERM=xterm-256color’ or ‘TERM=konsole-256color’.
   • In KDE: ‘yakuake’ (sets ‘TERM=xterm’).  You need to set
     ‘TERM=xterm-256color’.
   • In Enlightenment: ‘Eterm’ (sets ‘TERM=Eterm’).  You need to set
     ‘TERM=Eterm-256color’.
   • ‘mlterm’ (sets ‘TERM=mlterm’).  You need to set
     ‘TERM=mlterm-256color’.
   • On Windows: ‘PuTTY’ (sets ‘TERM=xterm’).  You need to set
     ‘TERM=xterm-256color’ or ‘TERM=putty-256color’.
   • On Windows: ‘TeraTerm’ (sets ‘TERM=xterm’).  You need to set
     ‘TERM=xterm-256color’.

   A couple of terminal emulator programs support even the entire RGB
color space (16 million colors).  To get this to work, at this date
(2019), you need three things:
   • The ‘ncurses’ library version 6.1 or newer must be installed.
   • You need a recent version of the respective terminal emulator
     program.  See <https://github.com/termstandard/colors> for the most
     recent developments in this area.
   • You need to set the ‘TERM’ environment variable to the
     corresponding value: ‘TERM=xterm-direct’ instead of ‘TERM=xterm’ or
     ‘TERM=xterm-256color’, ‘TERM=konsole-direct’ in ‘konsole’,
     ‘TERM=st-direct’ in ‘st’, ‘TERM=mlterm-direct’ in ‘mlterm’, or
     ‘TERM=iterm2-direct’ in ‘iTerm2’ on macOS.


File: libtextstyle.info,  Node: Consoles,  Prev: Terminal emulators,  Up: The TERM variable

2.1.2 Consoles
--------------

   On OpenBSD 6 consoles, ‘TERM=xterm’ produces better results than the
default ‘TERM=vt220’.

   On NetBSD 8 consoles, ‘TERM=netbsd6’ produces better results than the
default ‘TERM=vt100’.

   On Windows consoles, no ‘TERM’ setting is needed.


File: libtextstyle.info,  Node: The NO_COLOR variable,  Next: The NO_TERM_HYPERLINKS variable,  Prev: The TERM variable,  Up: The user's view

2.2 The environment variable ‘NO_COLOR’
=======================================

   The environment variable ‘NO_COLOR’ can be used to suppress styling
in the textual output.  When this environment variable is set (to any
value), ‘libtextstyle’-enabled programs will not emit colors and other
text styling.

   This environment variable can be overridden by passing the
command-line option ‘--color=always’ (see *note The --color option::).


File: libtextstyle.info,  Node: The NO_TERM_HYPERLINKS variable,  Next: Emacs,  Prev: The NO_COLOR variable,  Up: The user's view

2.3 The environment variable ‘NO_TERM_HYPERLINKS’
=================================================

   The environment variable ‘NO_TERM_HYPERLINKS’ can be used to suppress
hyperlinks in the textual output.  When this environment variable is set
(to any value), ‘libtextstyle’-enabled programs will not emit
hyperlinks.  This may be useful for terminal emulators which produce
garbage output when they receive the escape sequence for a hyperlink.
Currently (as of 2019), this affects some versions of ‘konsole’,
‘emacs’, ‘lxterminal’, ‘guake’, ‘yakuake’, ‘rxvt’.


File: libtextstyle.info,  Node: Emacs,  Next: The --color option,  Prev: The NO_TERM_HYPERLINKS variable,  Up: The user's view

2.4 Emacs as a terminal emulator
================================

   Emacs has several terminal emulators: ‘M-x shell’ and ‘M-x term’.
‘M-x term’ has good support for styling, whereas in ‘M-x shell’ most of
the styling gets lost.


File: libtextstyle.info,  Node: The --color option,  Next: The --style option,  Prev: Emacs,  Up: The user's view

2.5 The ‘--color’ option
========================

   The ‘--color=WHEN’ option specifies under which conditions styled
(colorized) output should be generated.  The WHEN part can be one of the
following:

‘always’
‘yes’
     The output will be colorized.

‘never’
‘no’
     The output will not be colorized.

‘auto’
‘tty’
     The output will be colorized if the output device is a tty, i.e.
     when the output goes directly to a text screen or terminal emulator
     window.

‘html’
     The output will be colorized and be in HTML format.  This value is
     only supported by some programs.

‘test’
     This is a special value, understood only by some programs.  It is
     explained in the section (*note The TERM variable::) above.

‘--color’ is equivalent to ‘--color=yes’.  The default is
‘--color=auto’.

   Thus, a command that invokes a ‘libtextstyle’-enabled program will
produce colorized output when called by itself in a command window.
Whereas in a pipe, such as ‘PROGRAM ARGUMENTS | less -R’, it will not
produce colorized output.  To get colorized output in this situation
nevertheless, use the command ‘PROGRAM --color ARGUMENTS | less -R’.

   The ‘--color=html’ option will produce output that can be viewed in a
browser.  This can be useful, for example, for Indic languages, because
the renderic of Indic scripts in browsers is usually better than in
terminal emulators.

   Note that the output produced with the ‘--color’ option is _not_
consumable by programs that expect the raw text.  It contains additional
terminal-specific escape sequences or HTML tags.  For example, an XML
parser will give a syntax error when confronted with a colored XML
output.  Except for the ‘--color=html’ case, you therefore normally
don't need to save output produced with the ‘--color’ option in a file.


File: libtextstyle.info,  Node: The --style option,  Prev: The --color option,  Up: The user's view

2.6 The ‘--style’ option
========================

   The ‘--style=STYLE_FILE’ option specifies the style file to use when
colorizing.  It has an effect only when the ‘--color’ option is
effective.

   If the ‘--style’ option is not specified, the program may consider
the value of an environment variable.  It is meant to point to the
user's preferred style for such output.  The name of such an environment
variable, if supported, is documented in the documentation of the
‘libtextstyle’-enabled program.

   You can also design your own styles.  This is described in the next
section.

* Menu:

* Style rules::                 How to create a style file
* Debugging style files::       How to debug a style file


File: libtextstyle.info,  Node: Style rules,  Next: Debugging style files,  Up: The --style option

2.6.1 Creating your own style files
-----------------------------------

   The same style file can be used for styling a certain type of output,
for terminal output and for HTML output.  It is written in CSS
(Cascading Style Sheet) syntax.  See <https://www.w3.org/TR/CSS2/> for a
formal definition of CSS. Many HTML authoring tutorials also contain
explanations of CSS.

   In the case of HTML output, the style file is embedded in the HTML
output.  In the case of text output, the style file is interpreted by
the ‘libtextstyle’-enabled program.

   You should avoid ‘@import’ statements, because
   − In the case of HTML output, the files referenced by the ‘@import’
     statements would not be embedded in the HTML output.  In fact,
     relative file names would be interpreted relative to the resulting
     HTML file.
   − In the case of text output, ‘@import’s are not supported, due to a
     limitation in ‘libcroco’.

   CSS rules are built up from selectors and declarations.  The
declarations specify graphical properties; the selectors specify when
they apply.

   GNU libtextstyle supports simple selectors based on "CSS classes",
see the CSS2 spec, section 5.8.3.  The set of CSS classes that are
supported by a ‘libtextstyle’-enabled program are documented in the
documentation of that program.

   These selectors can be combined to hierarchical selectors.  For
example, assume a program supports the CSS classes ‘string’ (that
matches a string) and ‘non-ascii’ (that matches a word with non-ASCII
characters), you could write

     .string .non-ascii { color: red; }

to highlight only the non-ASCII words inside strings.

   In text mode, pseudo-classes (CSS2 spec, section 5.11) and
pseudo-elements (CSS2 spec, section 5.12) are not supported.

   The declarations in HTML mode are not limited; any graphical
attribute supported by the browsers can be used.

   The declarations in text mode are limited to the following
properties.  Other properties will be silently ignored.

‘color’ (CSS2 spec, section 14.1)
‘background-color’ (CSS2 spec, section 14.2.1)
     These properties are supported.  Colors will be adjusted to match
     the terminal's capabilities.  Note that many terminals support only
     8 colors.

‘font-weight’ (CSS2 spec, section 15.2.3)
     This property is supported, but most terminals can only render two
     different weights: ‘normal’ and ‘bold’.  Values >= 600 are rendered
     as ‘bold’.

‘font-style’ (CSS2 spec, section 15.2.3)
     This property is supported.  The values ‘italic’ and ‘oblique’ are
     rendered the same way.

‘text-decoration’ (CSS2 spec, section 16.3.1)
     This property is supported, limited to the values ‘none’ and
     ‘underline’.


File: libtextstyle.info,  Node: Debugging style files,  Prev: Style rules,  Up: The --style option

2.6.2 Debugging style files
---------------------------

   If you want to understand why the style rules in a style file produce
the output that you see, you can do so in three steps:

  1. Run the program with the command-line option ‘--color=html’,
     redirecting the output to a file.
  2. Open the resulting HTML file in a browser.
  3. Use the browser's built-in CSS debugging tool.
        • In Firefox: From the pop-up menu, select "Inspect Element".
          Click somewhere in the DOM tree ("Inspector" tab) and look at
          the CSS declarations in the "Rules" tab.
        • In Chromium: From the pop-up menu, select "Inspect".  Click
          somewhere in the DOM tree ("Elements" tab) and look at the CSS
          declarations in the "Styles" tab.

   This technique allows you, in particular, to see which CSS
declarations override which other CSS declarations from other CSS rules.


File: libtextstyle.info,  Node: The programmer's view,  Next: Licenses,  Prev: The user's view,  Up: Top

3 The programmer's perspective
******************************

   As a programmer, enabling styling consists of the following tasks:
  1. Define the command-line options and environment variable that the
     user can use to control the styling.
  2. Define the CSS classes that the user can use in the CSS file.  Each
     CSS class corresponds to a text role; each CSS class can be given a
     different styling by the user.
  3. Change the output routines so that they take an ‘ostream_t’ object
     as argument instead of a ‘FILE *’.
  4. Insert paired invocations to ‘styled_ostream_begin_css_class’,
     ‘styled_ostream_end_css_class’ around each run of text with a
     specific text role.
  5. Link with ‘libtextstyle’.  If your package is using GNU autoconf,
     you can use the ‘libtextstyle.m4’ macro from Gnulib.
  6. Prepare a default style file.
  7. Update the documentation of your package.

   The following sections go into more detail.

* Menu:

* Basic use::
* Include files::
* Link options::
* Command-line options::
* The output stream hierarchy::
* Debugging the styling code::
* What to document::


File: libtextstyle.info,  Node: Basic use,  Next: Include files,  Up: The programmer's view

3.1 Basic use of libtextstyle
=============================

   Source code that makes use of GNU libtextstyle needs an include
statement:

     #include <textstyle.h>

   Basic use of GNU libtextstyle consists of statements like these:

       styled_ostream_t stream =
         styled_ostream_create (STDOUT_FILENO, "(stdout)", TTYCTL_AUTO,
                                style_file_name);
       ...
       styled_ostream_begin_use_class (stream, css_class);
       ...
       ostream_write_str (stream, string);
       ...
       styled_ostream_end_use_class (stream, css_class);
       ...
       styled_ostream_free (stream);

   Before this snippet, your code needs to determine the name of the
style file to use (‘style_file_name’).  If no styling is desired - the
precise condition depends on the value of ‘color_mode’ but also on your
application logic -, you should set ‘style_file_name’ to ‘NULL’.

   An object of type ‘styled_ostream_t’ is allocated.  The function
‘styled_ostream_create’ allocates it; the function ‘styled_ostream_free’
deallocates it.

   Such ‘styled_ostream_t’ supports output operations
(‘ostream_write_str’), interleaved with adding and removing CSS classes.
The CSS class in effect when an output operation is performed
determines, through the style file, the text attributes associated with
that piece of text.

* Menu:

* Hyperlinks::


File: libtextstyle.info,  Node: Hyperlinks,  Up: Basic use

3.1.1 Hyperlinks
----------------

   Text output may contain hyperlinks.  These hyperlinks are encoded
through an escape sequence, specified at Hyperlinks in terminal
emulators
(https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda).
Currently (as of 2024), they are displayed in many modern terminals, see
OSC8-Adoption (https://github.com/Alhadis/OSC8-Adoption).  More terminal
emulators will support hyperlinks in the future.  Terminal emulators
which don't support hyperlinks ignore it, except for a few terminal
emulators, for which users may need to disable the hyperlinks (see *note
The NO_TERM_HYPERLINKS variable::) if the heuristic built into
‘libtextstyle’ does not already disable them.

   To emit a hyperlink, use code like this:

       styled_ostream_t stream = ...
       ...
       /* Start a hyperlink.  */
       styled_ostream_set_hyperlink (stream, url, NULL);
       ...
       /* Emit the anchor text.  This can be styled text.  */
       ostream_write_str (stream, "Click here!");
       ...
       /* End the current hyperlink.  */
       styled_ostream_set_hyperlink (stream, NULL, NULL);

   The anchor text can be styled.  But the hyperlinks themselves cannot
be styled; they behave as implemented by the terminal emulator.


File: libtextstyle.info,  Node: Include files,  Next: Link options,  Prev: Basic use,  Up: The programmer's view

3.2 Include files
=================

   The include file ‘<textstyle.h>’ declares all facilities defined by
the library.


File: libtextstyle.info,  Node: Link options,  Next: Command-line options,  Prev: Include files,  Up: The programmer's view

3.3 Link options
================

   The library to link with is called ‘libtextstyle’, with a
system-dependent suffix.  You link with it though link options of the
form ‘-ltextstyle’ for a library installed in system locations, or
‘-LLIBDIR -ltextstyle’ for a static library installed in other
locations, or ‘-LLIBDIR -ltextstyle -Wl,-rpath,LIBDIR’ for a shared
library installed in other locations (assuming a GCC compatible compiler
and linker and no ‘libtool’), or ‘-LLIBDIR -ltextstyle -RLIBDIR’ for a
shared library installed in other locations (with ‘libtool’).
Additionally, the link options may need to include the dependencies:
‘-lm’, and ‘-lncurses’ or (on NetBSD) ‘-ltermcap’ or (on AIX)
‘-lxcurses’ or (on HP-UX) ‘-lcurses’, and on some systems also
‘-liconv’.

   It is a bit complicated to determine the right link options in a
portable way.  Therefore an Autoconf macro is provided in the file
‘libtextstyle.m4’ in Gnulib, that makes this task easier.  Assuming the
build system of your package is based on GNU Autoconf, you invoke it
through ‘gl_LIBTEXTSTYLE’.  It searches for an installed ‘libtextstyle’.
If found, it sets and AC_SUBSTs ‘HAVE_LIBTEXTSTYLE=yes’ and the
‘LIBTEXTSTYLE’ and ‘LTLIBTEXTSTYLE’ variables, and augments the
‘CPPFLAGS’ variable, and #defines ‘HAVE_LIBTEXTSTYLE’ to 1.  Otherwise,
it sets and AC_SUBSTs ‘HAVE_LIBTEXTSTYLE=no’ and ‘LIBTEXTSTYLE’ and
‘LTLIBTEXTSTYLE’ to empty.  In link commands that use ‘libtool’, use
‘LTLIBTEXTSTYLE’; in link commands that don't use ‘libtool’, use
‘LIBTEXTSTYLE’.

   If you use GNU Automake, the proper place to use the link options is
‘PROGRAM_LDADD’ for programs and ‘LIBRARY_LIBADD’ for libraries.


File: libtextstyle.info,  Node: Command-line options,  Next: The output stream hierarchy,  Prev: Link options,  Up: The programmer's view

3.4 Command-line options
========================

   While you are free to provide any command-line option to enable the
styling of the output, it is good if different GNU programs use the same
command-line options for this purpose.  These options are described in
the sections *note The --color option:: and *note The --style option::.
To achieve this, use the following API (declared in ‘<textstyle.h>’):

 -- Variable: bool color_test_mode
     True if a ‘--color’ option with value ‘test’ has been seen.

 -- Variable: enum color_option color_mode
     Stores the value of the ‘--color’ option.

 -- Variable: const char * style_file_name
     Stores the value of the ‘--style’ option.

   Note: These variables, like any variables exported from shared
libraries, can only be used in executable code.  You _cannot_ portably
use their address in initializers of global or static variables.  This
is a restriction that is imposed by the Windows, Cygwin, and Android
platforms.

 -- Function: bool handle_color_option (const char *OPTION)
     You invoke this function when, during argument parsing, you have
     encountered a ‘--color’ or ‘--color=...’ option.  The return value
     is an error indicator: ‘true’ means an invalid option.

 -- Function: void handle_style_option (const char *OPTION)
     You invoke this function when, during argument parsing, you have
     encountered a ‘--style’ or ‘--style=...’ option.

 -- Function: void print_color_test (void)
     Prints a color test page.  You invoke this function after argument
     parsing, when the ‘color_test_mode’ variable is true.

 -- Function: void style_file_prepare (const char *STYLE_FILE_ENVVAR,
          const char *STYLESDIR_ENVVAR,
          const char *STYLESDIR_AFTER_INSTALL,
          const char *DEFAULT_STYLE_FILE)
     Assigns a default value to ‘style_file_name’ if necessary.  You
     invoke this function after argument parsing, when ‘color_test_mode’
     is false.

     ‘STYLE_FILE_ENVVAR’ is an environment variable that, when set to a
     non-empty value, specifies the style file to use.  This environment
     variable is meant to be set by the user.

     ‘STYLESDIR_ENVVAR’ is an environment variable that, when set to a
     non-empty value, specifies the directory with the style files, or
     ‘NULL’.  This is necessary for running the testsuite before ‘make
     install’.

     ‘STYLESDIR_AFTER_INSTALL’ is the directory with the style files
     after ‘make install’.

     ‘DEFAULT_STYLE_FILE’ is the file name of the default style file,
     relative to STYLESDIR.


File: libtextstyle.info,  Node: The output stream hierarchy,  Next: Debugging the styling code,  Prev: Command-line options,  Up: The programmer's view

3.5 The output stream hierarchy
===============================

   There are various classes of output streams, some of them with
styling support.  These "classes" are defined in an object-oriented
programming style that resembles C++ or Java, but are actually
implemented in C with a little bit of object orientation syntax.  These
definitions are preprocessed down to C. As a consequence, GNU
libtextstyle is a C library and does not need to link with the C++
standard library.

   All these classes are declared in ‘<textstyle.h>’.

   The base output stream type is ‘ostream_t’.  It is a pointer type to
a (hidden) implementation type.  Similarly for the subclasses.

   When we say that ‘some_ostream_t’ is a subclass of ‘ostream_t’, what
we mean is:
   • Every ‘some_ostream_t’ object can be converted to an ‘ostream_t’,
     by virtue of a simple assignment.  No cast is needed.
   • The opposite conversion, from ‘ostream_t’ to ‘some_ostream_t’, can
     also be performed, provided that the object is actually an instance
     of ‘some_ostream_t’.  You can test whether an object is an instance
     of ‘some_ostream_t’ by invoking the method ‘bool
     is_instance_of_some_ostream (ostream_t stream)’.
   • Every method ‘ostream_FOOBAR’ exists also as a method
     ‘some_ostream_FOOBAR’ with compatible argument types and a
     compatible return type.

* Menu:

* The ostream class::
* The styled_ostream class::
* ostream subclasses without styling::
* styled_ostream subclasses::
* Accessors::


File: libtextstyle.info,  Node: The ostream class,  Next: The styled_ostream class,  Up: The output stream hierarchy

3.5.1 The abstract ‘ostream’ class
----------------------------------

   The base output stream type is ‘ostream_t’.

   It has the following methods:

 -- Function: void ostream_write_mem (ostream_t STREAM,
          const void *DATA, size_t LEN)
     Writes a sequence of bytes to a stream.

 -- Function: void ostream_write_str (ostream_t STREAM,
          const char *STRING)
     Writes a string's contents to a stream.

 -- Function: ptrdiff_t ostream_printf (ostream_t STREAM,
          const char *FORMAT, ...)
 -- Function: ptrdiff_t ostream_vprintf (ostream_t STREAM,
          const char *FORMAT, va_list args)
     Writes formatted output to a stream.

     These functions return the size of formatted output, or a negative
     value in case of an error.

 -- Function: void ostream_flush (ostream_t STREAM,
          ostream_flush_scope_t SCOPE)
     Brings buffered data to its destination.

 -- Function: void ostream_free (ostream_t STREAM)
     Closes and frees a stream.


File: libtextstyle.info,  Node: The styled_ostream class,  Next: ostream subclasses without styling,  Prev: The ostream class,  Up: The output stream hierarchy

3.5.2 The abstract ‘styled_ostream’ class
-----------------------------------------

   The type for a styled output stream is ‘styled_ostream_t’.  It is a
subclass of ‘ostream_t’ that adds the following methods:

 -- Function: void styled_ostream_begin_use_class
          (styled_ostream_t STREAM, const char *CLASSNAME)
     Starts a run of text belonging to ‘CLASSNAME’.  The ‘CLASSNAME’ is
     the name of a CSS class.  It can be chosen arbitrarily and
     customized through the CSS file.

 -- Function: void styled_ostream_end_use_class
          (styled_ostream_t STREAM, const char *CLASSNAME)
     Ends a run of text belonging to ‘CLASSNAME’.  The
     ‘styled_ostream_begin_use_class’ / ‘styled_ostream_end_use_class’
     calls must match properly.

 -- Function: const char * styled_ostream_get_hyperlink_ref
          (styled_ostream_t STREAM)
     Returns the referred URL of the currently set hyperlink, or ‘NULL’
     if no hyperlink attribute is currently set.

     Note: The returned string is only valid up to the next invocation
     of ‘styled_ostream_set_hyperlink’.

 -- Function: const char * styled_ostream_get_hyperlink_id
          (styled_ostream_t STREAM)
     Returns the id of the currently set hyperlink, or ‘NULL’ if no
     hyperlink attribute is currently set.

     Note: The returned string is only valid up to the next invocation
     of ‘styled_ostream_set_hyperlink’.

 -- Function: void styled_ostream_set_hyperlink
          (styled_ostream_t STREAM, const char *REF, const char *ID)
     Sets or removes a hyperlink attribute.

     To set a hyperlink attribute, pass a non-‘NULL’ REF.  REF is an
     URL; it should be at most 2083 bytes long.  Non-ASCII characters
     should be URI-escaped (using the %nn syntax).  ID is an optional
     identifier.  On terminal output, multiple hyperlinks with the same
     ID will be highlighted together.  If specified, ID should be at
     most 250 bytes long.

     To remove a hyperlink attribute, pass ‘NULL’ for REF and ID.

     Hyperlinks don't nest.  That is, a hyperlink attribute is enabled
     only up to the next invocation of ‘styled_ostream_set_hyperlink’.

 -- Function: void styled_ostream_flush_to_current_style
          (styled_ostream_t STREAM)
     This function acts like ‘ostream_flush (STREAM,
     FLUSH_THIS_STREAM)’, except that it leaves the destination with the
     current text style enabled, instead of with the default text style.

     After calling this function, you can output strings without
     newlines(!)  to the underlying stream, and they will be rendered
     like strings passed to ‘ostream_write_mem’, ‘ostream_write_str’, or
     ‘ostream_printf’.


File: libtextstyle.info,  Node: ostream subclasses without styling,  Next: styled_ostream subclasses,  Prev: The styled_ostream class,  Up: The output stream hierarchy

3.5.3 Concrete ostream subclasses without styling
-------------------------------------------------

* Menu:

* The file_ostream class::      Output to a FILE stream.
* The fd_ostream class::        Output to a file descriptor.
* The term_ostream class::      Output to a terminal.
* The html_ostream class::      Output to an HTML file.
* The memory_ostream class::    Output to a memory buffer,
* The iconv_ostream class::     Output with character encoding conversion.


File: libtextstyle.info,  Node: The file_ostream class,  Next: The fd_ostream class,  Up: ostream subclasses without styling

3.5.3.1 The ‘file_ostream’ class
................................

   The ‘file_ostream’ class supports output to an ‘<stdio.h>’ ‘FILE’
stream.  Its type is ‘file_ostream_t’.  It is a subclass of ‘ostream_t’
that adds no methods.

   It can be instantiated through this function:

 -- Function: file_ostream_t file_ostream_create (FILE *FP)
     Creates an output stream referring to ‘FP’.

     Note: The resulting stream must be closed before ‘FP’ can be
     closed.


File: libtextstyle.info,  Node: The fd_ostream class,  Next: The term_ostream class,  Prev: The file_ostream class,  Up: ostream subclasses without styling

3.5.3.2 The ‘fd_ostream’ class
..............................

   The ‘file_ostream’ class supports output to a file descriptor.  Its
type is ‘fd_ostream_t’.  It is a subclass of ‘ostream_t’ that adds no
methods.

   It can be instantiated through this function:

 -- Function: fd_ostream_t fd_ostream_create (int FD,
          const char *FILENAME, bool BUFFERED)
     Creates an output stream referring to the file descriptor ‘FD’.

     ‘FILENAME’ is used only for error messages.

     Note: The resulting stream must be closed before ‘FD’ can be
     closed.


File: libtextstyle.info,  Node: The term_ostream class,  Next: The html_ostream class,  Prev: The fd_ostream class,  Up: ostream subclasses without styling

3.5.3.3 The ‘term_ostream’ class
................................

   The ‘term_ostream’ class supports output to a file descriptor that is
connected to a terminal emulator or console.  Its type is
‘term_ostream_t’.  It is a subclass of ‘ostream_t’.

   It can be instantiated through this function:

 -- Function: term_ostream_t term_ostream_create (int FD,
          const char *FILENAME, ttyctl_t TTY_CONTROL)
     Creates an output stream referring to the file descriptor ‘FD’.

     ‘FILENAME’ is used only for error messages.

     ‘TTY_CONTROL’ specifies the amount of control to take over the
     underlying tty.

     The resulting stream will be line-buffered.

     Note: The resulting stream must be closed before ‘FD’ can be
     closed.

   The class adds the following methods:

 -- Function: term_color_t term_ostream_rgb_to_color
          (term_ostream_t STREAM, int RED, int GREEN, int BLUE)
     Converts an RGB value (‘RED’, ‘GREEN’, ‘BLUE’ in [0..255]) to a
     color, valid for this stream only.

 -- Function: term_color_t term_ostream_get_color
          (term_ostream_t STREAM)
 -- Function: void term_ostream_set_color (term_ostream_t STREAM,
          term_color_t COLOR)
     Gets/sets the text color.

 -- Function: term_color_t term_ostream_get_bgcolor
          (term_ostream_t STREAM)
 -- Function: void term_ostream_set_bgcolor (term_ostream_t STREAM,
          term_color_t COLOR)
     Gets/sets the background color.

 -- Function: term_weight_t term_ostream_get_weight
          (term_ostream_t STREAM)
 -- Function: void term_ostream_set_weight (term_ostream_t STREAM,
          term_weight_t WEIGHT)
     Gets/sets the font weight.

 -- Function: term_posture_t term_ostream_get_posture
          (term_ostream_t STREAM)
 -- Function: void term_ostream_set_posture (term_ostream_t STREAM,
          term_posture_t POSTURE)
     Gets/sets the font posture.

 -- Function: term_underline_t term_ostream_get_underline
          (term_ostream_t STREAM)
 -- Function: void term_ostream_set_underline (term_ostream_t STREAM,
          term_underline_t UNDERLINE)
     Gets/sets the text underline decoration.

 -- Function: const char * term_ostream_get_hyperlink_ref
          (term_ostream_t STREAM)
     Returns the referred URL of the currently set hyperlink, or ‘NULL’
     if no hyperlink attribute is currently set.

     Note: The returned string is only valid up to the next invocation
     of ‘term_ostream_set_hyperlink’.

 -- Function: const char * term_ostream_get_hyperlink_id
          (term_ostream_t STREAM)
     Returns the id of the currently set hyperlink, or ‘NULL’ if no
     hyperlink attribute is currently set.

     Note: The returned string is only valid up to the next invocation
     of ‘term_ostream_set_hyperlink’.

 -- Function: void term_ostream_set_hyperlink (term_ostream_t STREAM,
          const char *REF, const char *ID)
     Sets or removes a hyperlink attribute.

     To set a hyperlink attribute, pass a non-‘NULL’ REF.  REF is an
     URL; it should be at most 2083 bytes long.  Non-ASCII characters
     should be URI-escaped (using the %nn syntax).  ID is an optional
     identifier.  Multiple hyperlinks with the same ID will be
     highlighted together.  If specified, ID should be at most 250 bytes
     long.

     To remove a hyperlink attribute, pass ‘NULL’ for REF and ID.

     Hyperlinks don't nest.  That is, a hyperlink attribute is enabled
     only up to the next invocation of ‘styled_ostream_set_hyperlink’.

 -- Function: void term_ostream_flush_to_current_style
          (term_ostream_t STREAM)
     This function acts like ‘ostream_flush (STREAM,
     FLUSH_THIS_STREAM)’, except that it leaves the terminal with the
     current text attributes enabled, instead of with the default text
     attributes.

     After calling this function, you can output strings without
     newlines(!)  to the underlying file descriptor, and they will be
     rendered like strings passed to ‘ostream_write_mem’,
     ‘ostream_write_str’, or ‘ostream_printf’.


File: libtextstyle.info,  Node: The html_ostream class,  Next: The memory_ostream class,  Prev: The term_ostream class,  Up: ostream subclasses without styling

3.5.3.4 The ‘html_ostream’ class
................................

   The ‘html_ostream’ class supports output to any destination, in HTML
syntax.  Its type is ‘html_ostream_t’.  It is a subclass of ‘ostream_t’.

   It can be instantiated through this function:

 -- Function: html_ostream_t html_ostream_create (ostream_t DESTINATION)
     Creates an output stream that takes input in the UTF-8 encoding and
     writes it in HTML form on ‘DESTINATION’.

     This stream produces a sequence of lines.  The caller is
     responsible for opening the ‘<body><html>’ elements before and for
     closing them after the use of this stream.

     Note: The resulting stream must be closed before ‘DESTINATION’ can
     be closed.

   The class adds the following methods:

 -- Function: void html_ostream_begin_span (html_ostream_t STREAM,
          const char *CLASSNAME)
     Starts a ‘<span class="CLASSNAME">’ element.  The ‘CLASSNAME’ is
     the name of a CSS class.  It can be chosen arbitrarily and
     customized through the CSS file.

 -- Function: void html_ostream_end_span (html_ostream_t STREAM,
          const char *CLASSNAME)
     Ends a ‘<span class="CLASSNAME">’ element.

     The ‘html_ostream_begin_span’ / ‘html_ostream_end_span’ calls must
     match properly.

 -- Function: const char * html_ostream_get_hyperlink_ref
          (html_ostream_t STREAM)
     Returns the referred URL of the currently set hyperlink, or ‘NULL’
     if no hyperlink attribute is currently set.

     Note: The returned string is only valid up to the next invocation
     of ‘html_ostream_set_hyperlink_ref’.

 -- Function: void html_ostream_set_hyperlink_ref
          (html_ostream_t STREAM, const char *REF)
     Sets or removes a hyperlink attribute.

     To set a hyperlink attribute, pass a non-‘NULL’ REF.  REF is an
     URL; it should be at most 2083 bytes long.  Non-ASCII characters
     should be URI-escaped (using the %nn syntax).

     To remove a hyperlink attribute, pass ‘NULL’ for REF.

     Hyperlinks don't nest.  That is, a hyperlink attribute is enabled
     only up to the next invocation of ‘html_ostream_set_hyperlink_ref’.

 -- Function: void html_ostream_flush_to_current_style
          (html_ostream_t STREAM)
     This function acts like ‘ostream_flush (STREAM,
     FLUSH_THIS_STREAM)’, except that it leaves the destination with the
     current text style enabled, instead of with the default text style.

     After calling this function, you can output strings without
     newlines(!)  to the underlying stream, and they will be rendered
     like strings passed to ‘ostream_write_mem’, ‘ostream_write_str’, or
     ‘ostream_printf’.


File: libtextstyle.info,  Node: The memory_ostream class,  Next: The iconv_ostream class,  Prev: The html_ostream class,  Up: ostream subclasses without styling

3.5.3.5 The ‘memory_ostream’ class
..................................

   The ‘memory_ostream’ class supports output to an in-memory buffer.
Its type is ‘memory_ostream_t’.  It is a subclass of ‘ostream_t’.

   It can be instantiated through this function:

 -- Function: memory_ostream_t memory_ostream_create (void)
     Creates an output stream that accumulates the output in a memory
     buffer.

   The class adds the following method:

 -- Function: void memory_ostream_contents (memory_ostream_t STREAM,
          const void **BUFP, size_t *BUFLENP)
     Returns a pointer to the output accumulated so far and its size.
     It stores them in ‘*BUFP’ and ‘*BUFLENP’, respectively.

     Note: These two return values become invalid when more output is
     done to the stream or when the stream is freed.


File: libtextstyle.info,  Node: The iconv_ostream class,  Prev: The memory_ostream class,  Up: ostream subclasses without styling

3.5.3.6 The ‘iconv_ostream’ class
.................................

   The ‘iconv_ostream’ class supports output to any destination.  Its
type is ‘iconv_ostream_t’.  It is a subclass of ‘ostream_t’ that adds no
methods.

   It can be instantiated through this function:

 -- Function: iconv_ostream_t iconv_ostream_create
          (const char *FROM_ENCODING, const char *TO_ENCODING,
          ostream_t DESTINATION)
     Creates an output stream that converts from ‘FROM_ENCODING’ to
     ‘TO_ENCODING’, writing the result to ‘DESTINATION’.

     Note: The resulting stream must be closed before ‘DESTINATION’ can
     be closed.


File: libtextstyle.info,  Node: styled_ostream subclasses,  Next: Accessors,  Prev: ostream subclasses without styling,  Up: The output stream hierarchy

3.5.4 Concrete ‘styled_ostream’ subclasses
------------------------------------------

* Menu:

* The term_styled_ostream class::  Styled output to a terminal.
* The html_styled_ostream class::  Styled output to an HTML file.
* The noop_styled_ostream class::  No-op styling.


File: libtextstyle.info,  Node: The term_styled_ostream class,  Next: The html_styled_ostream class,  Up: styled_ostream subclasses

3.5.4.1 The ‘term_styled_ostream’ class
.......................................

   The ‘term_styled_ostream’ class supports styled output to a file
descriptor that is connected to a terminal emulator or console.  Its
type is ‘term_styled_ostream_t’.  It is a subclass of
‘styled_ostream_t’.

   It can be instantiated through this function:

 -- Function: term_styled_ostream_t term_styled_ostream_create (int FD,
          const char *FILENAME, ttyctl_t TTY_CONTROL,
          const char *CSS_FILENAME)
     Creates an output stream referring to the file descriptor ‘FD’,
     styled with the file ‘CSS_FILENAME’.

     ‘FILENAME’ is used only for error messages.

     ‘TTY_CONTROL’ specifies the amount of control to take over the
     underlying tty.

     Note: The resulting stream must be closed before ‘FD’ can be
     closed.

     Returns ‘NULL’ upon failure.

   The following is a variant of this function.  Upon failure, it does
not return ‘NULL’; instead, it returns a styled ‘fd_stream’ on which the
styling operations exist but are no-ops.

 -- Function: styled_ostream_t styled_ostream_create (int FD,
          const char *FILENAME, ttyctl_t TTY_CONTROL,
          const char *CSS_FILENAME)
     Creates an output stream referring to the file descriptor ‘FD’,
     styled with the file ‘CSS_FILENAME’ if possible.

     ‘FILENAME’ is used only for error messages.

     ‘TTY_CONTROL’ specifies the amount of control to take over the
     underlying tty.

     Note: The resulting stream must be closed before ‘FD’ can be
     closed.


File: libtextstyle.info,  Node: The html_styled_ostream class,  Next: The noop_styled_ostream class,  Prev: The term_styled_ostream class,  Up: styled_ostream subclasses

3.5.4.2 The ‘html_styled_ostream’ class
.......................................

   The ‘html_styled_ostream’ class supports styled output to any
destination, in HTML syntax.  Its type is ‘html_styled_ostream_t’.  It
is a subclass of ‘styled_ostream_t’.

   It can be instantiated through this function:

 -- Function: html_styled_ostream_t html_styled_ostream_create
          (ostream_t DESTINATION, const char *CSS_FILENAME)
     Creates an output stream that takes input in the UTF-8 encoding and
     writes it in HTML form on ‘DESTINATION’, styled with the file
     ‘CSS_FILENAME’.

     Note: The resulting stream must be closed before ‘DESTINATION’ can
     be closed.


File: libtextstyle.info,  Node: The noop_styled_ostream class,  Prev: The html_styled_ostream class,  Up: styled_ostream subclasses

3.5.4.3 The ‘noop_styled_ostream’ class
.......................................

   The ‘noop_styled_ostream’ class supports the styled output operations
to any destination.  The text is output to the given destination; the
styling operations, however, do nothing.  Its type is
‘noop_styled_ostream_t’.  It is a subclass of ‘styled_ostream_t’.

   It can be instantiated through this function:

 -- Function: noop_styled_ostream_t noop_styled_ostream_create
          (ostream_t DESTINATION, bool PASS_OWNERSHIP)
     Creates an output stream that delegates to ‘DESTINATION’ and that
     supports the styling operations as no-ops.

     If ‘PASS_OWNERSHIP’ is ‘true’, closing the resulting stream will
     automatically close the ‘DESTINATION’.

     Note: If ‘PASS_OWNERSHIP’ is ‘false’, the resulting stream must be
     closed before ‘DESTINATION’ can be closed.


File: libtextstyle.info,  Node: Accessors,  Prev: styled_ostream subclasses,  Up: The output stream hierarchy

3.5.5 Accessor functions
------------------------

   The various concrete stream classes have methods that allow you to
retrieve the arguments passed to the respective constructor function.

   Note: While these methods allow you to retrieve the underlying
destination stream of various kinds of stream, it is not recommended to
operate on both the stream and its underlying destination stream at the
same time.  Doing so can lead to undesired interactions between the two
streams.

   The ‘file_ostream’ class has this accessor method:

 -- Function: FILE * file_ostream_get_stdio_stream
          (file_ostream_t STREAM)

   The ‘fd_ostream’ class has these accessor methods:

 -- Function: int fd_ostream_get_descriptor (fd_ostream_t STREAM)
 -- Function: const char * fd_ostream_get_filename (fd_ostream_t STREAM)
 -- Function: bool fd_ostream_is_buffered (fd_ostream_t STREAM)

   The ‘term_ostream’ class has these accessor methods:

 -- Function: int term_ostream_get_descriptor (term_ostream_t STREAM)
 -- Function: const char * term_ostream_get_filename
          (term_ostream_t STREAM)
 -- Function: ttyctl_t term_ostream_get_tty_control
          (term_ostream_t STREAM)
 -- Function: ttyctl_t term_ostream_get_effective_tty_control
          (term_ostream_t STREAM)
     Returns the effective tty control of the stream (not
     ‘TTYCTL_AUTO’).

   The ‘iconv_ostream’ class has these accessor methods:

 -- Function: const char * iconv_ostream_get_from_encoding
          (iconv_ostream_t STREAM)
 -- Function: const char * iconv_ostream_get_to_encoding
          (iconv_ostream_t STREAM)
 -- Function: ostream_t iconv_ostream_get_destination
          (iconv_ostream_t STREAM)

   The ‘html_ostream’ class has this accessor method:

 -- Function: ostream_t html_ostream_get_destination
          (html_ostream_t STREAM)

   The ‘term_styled_ostream’ class has these accessor methods:

 -- Function: term_ostream_t term_styled_ostream_get_destination
          (term_styled_ostream_t STREAM)
 -- Function: const char * term_styled_ostream_get_css_filename
          (term_styled_ostream_t STREAM)

   The ‘html_styled_ostream’ class has these accessor methods:

 -- Function: ostream_t html_styled_ostream_get_destination
          (html_styled_ostream_t STREAM)
 -- Function: html_ostream_t html_styled_ostream_get_html_destination
          (html_styled_ostream_t STREAM)
 -- Function: const char * html_styled_ostream_get_css_filename
          (html_styled_ostream_t STREAM)

   The ‘noop_styled_ostream’ class has these accessor methods:

 -- Function: ostream_t noop_styled_ostream_get_destination
          (noop_styled_ostream_t STREAM)
 -- Function: bool noop_styled_ostream_is_owning_destination
          (noop_styled_ostream_t STREAM)


File: libtextstyle.info,  Node: Debugging the styling code,  Next: What to document,  Prev: The output stream hierarchy,  Up: The programmer's view

3.6 Debugging the text styling support
======================================

   If you want to understand which output of your program is associated
with which CSS classes, the simplest way is as follows:

  1. Run the program with the command-line option ‘--color=html’,
     redirecting the output to a file.
  2. Then inspect this output.  Text regions associated with a CSS class
     are surrounded by ‘<span class="CSS-CLASS">’...‘</span>’.


File: libtextstyle.info,  Node: What to document,  Prev: Debugging the styling code,  Up: The programmer's view

3.7 Documenting the text styling support
========================================

   To make the text styling support available to the end user of your
package, the following need to be documented:
   • The command-line options.  This typically needs to be done in
     several places: in the ‘--help’ output, in the ‘man’ pages (if
     present), and in the documentation.
   • Which programs support ‘--color=test’?
   • The list of CSS classes and their meaning.  This is necessary, so
     that the user can create their own style file; the CSS classes are
     part of the selectors in the CSS rules.
   • The location of the default style file.  This is a convenience, so
     that the user, when creating their own style file, can start from
     the default one.
   • The environment variable, called ‘STYLE_FILE_ENVVAR’ above, that,
     when set to a non-empty value, specifies the style file to use.


File: libtextstyle.info,  Node: Licenses,  Next: Function Index,  Prev: The programmer's view,  Up: Top

Appendix A Licenses
*******************

   The files of this package are covered by the licenses indicated in
each particular file or directory.  Here is a summary:

   • The ‘libtextstyle’ library and the example programs are covered by
     the GNU General Public License (GPL). A copy of the license is
     included in *note GNU GPL::.

   • This manual is free documentation.  It is dually licensed under the
     GNU FDL and the GNU GPL. This means that you can redistribute this
     manual under either of these two licenses, at your choice.
     This manual is covered by the GNU FDL. Permission is granted to
     copy, distribute and/or modify this document under the terms of the
     GNU Free Documentation License (FDL), either version 1.2 of the
     License, or (at your option) any later version published by the
     Free Software Foundation (FSF); with no Invariant Sections, with no
     Front-Cover Text, and with no Back-Cover Texts.  A copy of the
     license is included in *note GNU FDL::.
     This manual is covered by the GNU GPL. You can redistribute it
     and/or modify it under the terms of the GNU General Public License
     (GPL), either version 3 of the License, or (at your option) any
     later version published by the Free Software Foundation (FSF). A
     copy of the license is included in *note GNU GPL::.

* Menu:

* GNU GPL::                     GNU General Public License
* GNU FDL::                     GNU Free Documentation License


File: libtextstyle.info,  Node: GNU GPL,  Next: GNU FDL,  Up: Licenses

A.1 GNU GENERAL PUBLIC LICENSE
==============================

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

   The GNU General Public License is a free, copyleft license for
software and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.


File: libtextstyle.info,  Node: GNU FDL,  Prev: GNU GPL,  Up: Licenses

A.2 GNU Free Documentation License
==================================

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: libtextstyle.info,  Node: Function Index,  Next: Variable Index,  Prev: Licenses,  Up: Top

Function Index
**************

 [index ]
* Menu:

* fd_ostream_create:                     The fd_ostream class. (line 12)
* fd_ostream_get_descriptor:             Accessors.            (line 22)
* fd_ostream_get_filename:               Accessors.            (line 23)
* fd_ostream_is_buffered:                Accessors.            (line 24)
* file_ostream_create:                   The file_ostream class.
                                                               (line 12)
* file_ostream_get_stdio_stream:         Accessors.            (line 17)
* handle_color_option:                   Command-line options. (line 27)
* handle_style_option:                   Command-line options. (line 32)
* html_ostream_begin_span:               The html_ostream class.
                                                               (line 24)
* html_ostream_create:                   The html_ostream class.
                                                               (line 11)
* html_ostream_end_span:                 The html_ostream class.
                                                               (line 30)
* html_ostream_flush_to_current_style:   The html_ostream class.
                                                               (line 58)
* html_ostream_get_destination:          Accessors.            (line 49)
* html_ostream_get_hyperlink_ref:        The html_ostream class.
                                                               (line 37)
* html_ostream_set_hyperlink_ref:        The html_ostream class.
                                                               (line 45)
* html_styled_ostream_create:            The html_styled_ostream class.
                                                               (line 12)
* html_styled_ostream_get_css_filename:  Accessors.            (line 65)
* html_styled_ostream_get_destination:   Accessors.            (line 61)
* html_styled_ostream_get_html_destination: Accessors.         (line 63)
* iconv_ostream_create:                  The iconv_ostream class.
                                                               (line 12)
* iconv_ostream_get_destination:         Accessors.            (line 44)
* iconv_ostream_get_from_encoding:       Accessors.            (line 40)
* iconv_ostream_get_to_encoding:         Accessors.            (line 42)
* is_instance_of_fd_ostream:             The output stream hierarchy.
                                                               (line 27)
* is_instance_of_file_ostream:           The output stream hierarchy.
                                                               (line 27)
* is_instance_of_html_ostream:           The output stream hierarchy.
                                                               (line 27)
* is_instance_of_html_styled_ostream:    The output stream hierarchy.
                                                               (line 27)
* is_instance_of_iconv_ostream:          The output stream hierarchy.
                                                               (line 27)
* is_instance_of_memory_ostream:         The output stream hierarchy.
                                                               (line 27)
* is_instance_of_noop_styled_ostream:    The output stream hierarchy.
                                                               (line 27)
* is_instance_of_styled_ostream:         The output stream hierarchy.
                                                               (line 27)
* is_instance_of_term_ostream:           The output stream hierarchy.
                                                               (line 27)
* is_instance_of_term_styled_ostream:    The output stream hierarchy.
                                                               (line 27)
* memory_ostream_contents:               The memory_ostream class.
                                                               (line 17)
* memory_ostream_create:                 The memory_ostream class.
                                                               (line 11)
* noop_styled_ostream_create:            The noop_styled_ostream class.
                                                               (line 13)
* noop_styled_ostream_get_destination:   Accessors.            (line 70)
* noop_styled_ostream_is_owning_destination: Accessors.        (line 72)
* ostream_flush:                         The ostream class.    (line 27)
* ostream_free:                          The ostream class.    (line 31)
* ostream_printf:                        The ostream class.    (line 18)
* ostream_vprintf:                       The ostream class.    (line 20)
* ostream_write_mem:                     The ostream class.    (line 10)
* ostream_write_str:                     The ostream class.    (line 14)
* print_color_test:                      Command-line options. (line 36)
* style_file_prepare:                    Command-line options. (line 40)
* styled_ostream_begin_use_class:        The styled_ostream class.
                                                               (line  9)
* styled_ostream_create:                 The term_styled_ostream class.
                                                               (line 33)
* styled_ostream_end_use_class:          The styled_ostream class.
                                                               (line 15)
* styled_ostream_flush_to_current_style: The styled_ostream class.
                                                               (line 53)
* styled_ostream_get_hyperlink_id:       The styled_ostream class.
                                                               (line 29)
* styled_ostream_get_hyperlink_ref:      The styled_ostream class.
                                                               (line 21)
* styled_ostream_set_hyperlink:          The styled_ostream class.
                                                               (line 37)
* term_ostream_create:                   The term_ostream class.
                                                               (line 12)
* term_ostream_flush_to_current_style:   The term_ostream class.
                                                               (line 95)
* term_ostream_get_bgcolor:              The term_ostream class.
                                                               (line 39)
* term_ostream_get_color:                The term_ostream class.
                                                               (line 33)
* term_ostream_get_descriptor:           Accessors.            (line 28)
* term_ostream_get_effective_tty_control: Accessors.           (line 33)
* term_ostream_get_filename:             Accessors.            (line 29)
* term_ostream_get_hyperlink_id:         The term_ostream class.
                                                               (line 71)
* term_ostream_get_hyperlink_ref:        The term_ostream class.
                                                               (line 63)
* term_ostream_get_posture:              The term_ostream class.
                                                               (line 51)
* term_ostream_get_tty_control:          Accessors.            (line 31)
* term_ostream_get_underline:            The term_ostream class.
                                                               (line 57)
* term_ostream_get_weight:               The term_ostream class.
                                                               (line 45)
* term_ostream_rgb_to_color:             The term_ostream class.
                                                               (line 28)
* term_ostream_set_bgcolor:              The term_ostream class.
                                                               (line 41)
* term_ostream_set_color:                The term_ostream class.
                                                               (line 35)
* term_ostream_set_hyperlink:            The term_ostream class.
                                                               (line 79)
* term_ostream_set_posture:              The term_ostream class.
                                                               (line 53)
* term_ostream_set_underline:            The term_ostream class.
                                                               (line 59)
* term_ostream_set_weight:               The term_ostream class.
                                                               (line 47)
* term_styled_ostream_create:            The term_styled_ostream class.
                                                               (line 13)
* term_styled_ostream_get_css_filename:  Accessors.            (line 56)
* term_styled_ostream_get_destination:   Accessors.            (line 54)


File: libtextstyle.info,  Node: Variable Index,  Next: Index,  Prev: Function Index,  Up: Top

Variable Index
**************

 [index ]
* Menu:

* color_mode:                            Command-line options. (line 15)
* color_test_mode:                       Command-line options. (line 12)
* NO_COLOR, environment variable:        The NO_COLOR variable.
                                                               (line  6)
* NO_TERM_HYPERLINKS, environment variable: The NO_TERM_HYPERLINKS variable.
                                                               (line  6)
* style_file_name:                       Command-line options. (line 18)
* TERM, environment variable:            The TERM variable.    (line  6)


File: libtextstyle.info,  Node: Index,  Prev: Variable Index,  Up: Top

General Index
*************

 [index ]
* Menu:

* --color option:                        The --color option.    (line 6)
* --style option:                        The --style option.    (line 6)
* <textstyle.h>:                         Include files.         (line 6)
* Debugging:                             Debugging style files. (line 6)
* Debugging <1>:                         Debugging the styling code.
                                                                (line 6)
* FDL, GNU Free Documentation License:   GNU FDL.               (line 6)
* GPL, GNU General Public License:       GNU GPL.               (line 6)
* Include file:                          Include files.         (line 6)
* License, GNU FDL:                      GNU FDL.               (line 6)
* License, GNU GPL:                      GNU GPL.               (line 6)
* Licenses:                              Licenses.              (line 6)



Tag Table:
Node: Top1342
Node: Introduction1751
Node: Style definitions2425
Node: Built-in versus separate styling5107
Node: The user's view6297
Node: The TERM variable7317
Node: Terminal emulators8467
Node: Consoles10910
Node: The NO_COLOR variable11301
Node: The NO_TERM_HYPERLINKS variable11904
Node: Emacs12638
Node: The --color option13016
Node: The --style option15029
Node: Style rules15868
Node: Debugging style files18773
Node: The programmer's view19791
Node: Basic use21051
Node: Hyperlinks22559
Node: Include files23893
Node: Link options24135
Node: Command-line options26064
Node: The output stream hierarchy28863
Node: The ostream class30586
Node: The styled_ostream class31707
Node: ostream subclasses without styling34633
Node: The file_ostream class35277
Node: The fd_ostream class35908
Node: The term_ostream class36660
Node: The html_ostream class40956
Node: The memory_ostream class43878
Node: The iconv_ostream class44880
Node: styled_ostream subclasses45679
Node: The term_styled_ostream class46116
Node: The html_styled_ostream class47873
Node: The noop_styled_ostream class48753
Node: Accessors49801
Node: Debugging the styling code52713
Node: What to document53326
Node: Licenses54380
Node: GNU GPL55981
Node: GNU FDL93526
Node: Function Index118635
Node: Variable Index127421
Node: Index128150

End Tag Table


Local Variables:
coding: utf-8
End:

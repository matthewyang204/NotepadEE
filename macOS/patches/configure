#!/bin/bash

# Check for Python 3
printf "Checking for python3..."
if ! command -v python3 &> /dev/null
then
    echo "not found"
    echo "Python 3 not found. Please install it to continue."
    exit 1
else
    echo "found"
fi

# Check if Python 3 version is correct
printf "Checking if python3 version is correct..."
version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
# version=3.11.5
# version=3.13.2
# version=3.12
if [[ $version == 3.12.* ]]; then
    echo "correct"
elif [[ $version == 3.13.* ]]; then
    echo "correct"
else
    echo "incorrect"
    echo "The version of Python 3 currently installed is not a 3.12 release. Please install a 3.12 release to continue."
    exit 1
fi

# Check for pip3
printf "Checking for pip3..."
if ! command -v pip3 &> /dev/null
then
    echo "not found"
    echo "pip3 not found. Install it to continue."
    exit 1
else
    echo "found"
fi

# Check for tkinter as it is required
printf "Checking if python3 supports tkinter..."
if ! command -v python3 -c 'import tkinter' &> /dev/null
then
    echo "not available"
    echo "Tkinter not available. It is a core framework and required for compilation. Please compile python with tkinter or install a package containing tkinter to continue."
else
    echo "available"
fi

if ! command -v tar &> /dev/null
then
    echo "Tar not found. Install it before continuing."
    exit 1
else
    echo "Tar is installed."
fi

# Install required python packages
echo "Installing required packages"
pip3 install --upgrade -r requirements.txt --break-system-packages
echo "done"

echo "Now run 'make' to build."

# Force a failure at the end of the script for testing purposes; uncomment these lines to purposely crash the configure script
# echo "Simulating failure for testing..."
# exit 1

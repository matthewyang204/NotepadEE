#!/bin/bash

# Check for Python 3
printf "Checking for python3..."
if ! command -v python3 &> /dev/null
then
    echo "not found"
    echo "Python 3 not found. Please install it to continue."
    exit 1
else
    echo "found"
fi

# Check Python 3 version
printf "Checking python3 version..."
version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
echo $version

# version=3.11.5
# version=3.13.2
# version=3.12
# if [[ $version == 3.12.* ]]; then
#     echo "correct"
# elif [[ $version == 3.13.* ]]; then
    # echo "correct"
# else
#     echo "incorrect"
#     echo "The version of Python 3 currently installed is not a 3.12 release. Please install a 3.12 release to continue."
#     exit 1
# fi

# Set requirements file
printf "Setting requirements.txt..."
if [[ $version == 3.4.* ]]; then
    requirements='requirements-3.4.txt'
elif [[ $version == 3.5.* ]]; then
    requirements='requirements-3.4.txt'
else
    requirements='requirements.txt'
fi
echo "done"

# Check for pip3
printf "Checking for pip3..."
if ! command -v pip3 &> /dev/null
then
    echo "not found"
    echo "pip3 not found. Install it to continue."
    exit 1
else
    echo "found"
fi

# Check for tkinter as it is required
printf "Checking if python3 supports tkinter..."
if ! command -v python3 -c 'import tkinter' &> /dev/null
then
    echo "not available"
    echo "Tkinter not available. It is a core framework and required for compilation. Please compile python with tkinter or install a package containing tkinter to continue."
else
    echo "available"
fi

# Check for gettext
printf "Checking for gettext..."
if printf '%s\n' "$@" | grep -q -- "^--gettext="; then
    gettext_arg=$(printf '%s\n' "$@" | grep -m1 '^--gettext=')
    gettext_path="${gettext_arg#--gettext=}"
elif [ -f "/opt/gettext/bin/gettext" ]; then
    gettext_path="/opt/gettext"
elif [ -f "/usr/local/bin/gettext" ]; then
    gettext_path="/usr/local"
elif command -v brew >/dev/null 2>&1 && [ -d "$(brew --prefix gettext)" ]; then
    gettext_path="$(brew --prefix gettext)"
else
    echo "not found"
    echo "gettext not found. Install it to continue."
    exit 1
fi
echo "$gettext_path"

# Check for tcl-tk 8.6
printf "Checking for tcl-tk 8.6..."
if printf '%s\n' "$@" | grep -q -- "^--tcl-tk="; then
    tcltk_arg=$(printf '%s\n' "$@" | grep -m1 '^--tcl-tk=')
    tcltk_path="${tcltk_arg#--tcl-tk=}"
elif [ -f "/opt/tcl-tk/bin/tclsh8.6" ]; then
    tcltk_path="/opt/tcl-tk"
elif [ -f "/usr/local/bin/tclsh8.6" ]; then
    tcltk_path="/usr/local"
elif command -v brew >/dev/null 2>&1 && [ -d "$(brew --prefix tcl-tk)" ]; then
    tcltk_path="$(brew --prefix tcl-tk)"
else
    echo "not found"
    echo "tcl-tk 8.6 not found. Install it to continue."
    exit 1
fi
echo "$tcltk_path"

# Check for idlelib
printf "Checking if python3 supports idlelib..."
if ! command -v python3 -c 'import idlelib' &> /dev/null
then
    echo "not available"
    echo "IDLElib is not available. It is required for syntax highlighting. Please install it to continue."
    exit 1
else
    echo "available"
fi

if ! command -v tar &> /dev/null
then
    echo "Tar not found. Install it before continuing."
    exit 1
else
    echo "Tar is installed."
fi

# Install required python packages
echo "Installing required packages"
pip3 install --upgrade -r $requirements --break-system-packages
echo "done"

touch .configured
echo "Now run 'make' to build."

# Force a failure at the end of the script for testing purposes; uncomment these lines to purposely crash the configure script
# echo "Simulating failure for testing..."
# exit 1
